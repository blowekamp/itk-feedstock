# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The DOUBLE_CORRECT_NEEDED_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /scratch/blowekamp/ITK/Modules/ThirdParty/DoubleConversion/src/double-conversion/CMakeFiles/double-correction-needed.cc
# Executable    : /scratch/blowekamp/ITK/CMakeFiles/cmTC_8661a-DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
# Run arguments : 
#    Called from: [1]	/home/blowekamp/src/ITK/Modules/ThirdParty/DoubleConversion/src/double-conversion/CMakeLists.txt

set( DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)

# VCL_HAS_LFS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_HAS_LFS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_HAS_LFS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_HAS_LFS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_HAS_LFS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /scratch/blowekamp/ITK/CMakeFiles/cmTC_22ba0-VCL_HAS_LFS
# Run arguments : 
#    Called from: [3]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [2]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

set( VCL_HAS_LFS 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)

# VXL_HAS_SSE2_HARDWARE_SUPPORT
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VXL_HAS_SSE2_HARDWARE_SUPPORT to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VXL_HAS_SSE2_HARDWARE_SUPPORT__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VXL_HAS_SSE2_HARDWARE_SUPPORT__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VXL_HAS_SSE2_HARDWARE_SUPPORT_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /scratch/blowekamp/ITK/CMakeFiles/cmTC_df9f4-VXL_HAS_SSE2_HARDWARE_SUPPORT
# Run arguments : 
#    Called from: [3]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [2]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

set( VXL_HAS_SSE2_HARDWARE_SUPPORT 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)


# VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /scratch/blowekamp/ITK/CMakeFiles/cmTC_06eb5-VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE
# Run arguments : 
#    Called from: [3]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [2]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/blowekamp/src/ITK/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

set( VXL_SSE2_HARDWARE_SUPPORT_POSSIBLE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)

set( _libcxx_run_result
     0
     CACHE STRING "Results from TRY_RUN" FORCE)
set(_libcxx_run_result__TRYRUN_OUTPUT
     "nothing"
     CACHE STRING "Results from TRY_RUN" FORCE)

# QNANHIBIT_VALUE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set QNANHIBIT_VALUE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# QNANHIBIT_VALUE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set QNANHIBIT_VALUE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAVE_QNANHIBIT_VALUE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/blowekamp/src/ITK/Modules/ThirdParty/NrrdIO/src/NrrdIO/CMake/TestQnanhibit.c
# Executable    : /scratch/blowekamp/ITK/CMakeFiles/cmTC_d55bf-QNANHIBIT_VALUE
# Run arguments : 
#    Called from: [2]	/home/blowekamp/src/ITK/Modules/ThirdParty/NrrdIO/src/NrrdIO/CMake/TestQnanhibit.cmake
#                 [1]	/home/blowekamp/src/ITK/Modules/ThirdParty/NrrdIO/src/NrrdIO/CMakeLists.txt

set( QNANHIBIT_VALUE 
     1
     CACHE STRING "Result from TRY_RUN" FORCE)
set( QNANHIBIT_VALUE__TRYRUN_OUTPUT
     ""
     CACHE STRING "Result from TRY_RUN" FORCE)

set( HAVE_CLOCK_GETTIME_RUN
     0
     CACHE STRING "Result from TRY_RUN" FORCE)
